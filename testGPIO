#! /usr/bin/python
# -*- coding: utf-8 -*-

#Import
import RPi.GPIO as GPIO
import sys
import time

######## Definición de Constantes ########
#Define Puertos
#Filas
fila1=2     #Fila  
fila2=3     #Fila
fila3=4     #Fila
fila4=17    #Fila
fila5=27    #Fila
fila6=22    #Fila
fila7=10    #Fila
fila8=18    #Fila
#Columnas
col1=11     #Colum
col2=5      #Colum
col3=6      #Colum
col4=13     #Colum
col5=19     #Colum
col6=26     #Colum
col7=20     #Colum
col8=9      #Colum  

######## Declaraion GPIO #######
#GPIO.setwarnings(False) 
#GPIO.cleanup() #Reset All the 
time.sleep(0.1)
GPIO.setmode(GPIO.BCM) #Asignacion de pines 

GPIO.setup(fila1, GPIO.OUT)   #Fila  
GPIO.setup(fila2, GPIO.OUT)   #Fila
GPIO.setup(fila3, GPIO.OUT)   #Fila
GPIO.setup(fila4, GPIO.OUT)   #Fila
GPIO.setup(fila5, GPIO.OUT)   #Fila
GPIO.setup(fila6, GPIO.OUT)   #Fila
GPIO.setup(fila7, GPIO.OUT)   #Fila
GPIO.setup(fila8, GPIO.OUT)   #Fila
GPIO.setup(col1, GPIO.OUT)    #Colum
GPIO.setup(col2, GPIO.OUT)    #Colum
GPIO.setup(col3, GPIO.OUT)    #Colum
GPIO.setup(col4, GPIO.OUT)    #Colum
GPIO.setup(col5, GPIO.OUT)    #Colum
GPIO.setup(col6, GPIO.OUT)    #Colum
GPIO.setup(col7, GPIO.OUT)    #Colum
GPIO.setup(col8, GPIO.OUT)    #Colum

######### Definición de Funciones ##########
#Inicializa puertos
def matrizOnOff(col,fila):
	stateCol=col
	stateFila=fila

	GPIO.output(fila1, stateFila)     #Fila  
	GPIO.output(fila2, stateFila)     #Fila
	GPIO.output(fila3, stateFila)     #Fila
	GPIO.output(fila4, stateFila)     #Fila
	GPIO.output(fila5, stateFila)     #Fila
	GPIO.output(fila6, stateFila)     #Fila
	GPIO.output(fila7, stateFila)     #Fila
	GPIO.output(fila8, stateFila)     #Fila
	GPIO.output(col1, stateCol)       #Colum
	GPIO.output(col2, stateCol)       #Colum
	GPIO.output(col3, stateCol)       #Colum
	GPIO.output(col4, stateCol)       #Colum
	GPIO.output(col5, stateCol)       #Colum
	GPIO.output(col6, stateCol)       #Colum
	GPIO.output(col7, stateCol)       #Colum
	GPIO.output(col8, stateCol)       #Colum

# Verifica si el caracter ingresado es un número
def is_number(s):
	try: 
		float(s)
		return True
	except ValueError:
		return False
		
##### Variables ########


########## Main Fuction ########
def main():
	try:
		while True:
			testF=1     #Habilita Bucle Fila
			testC=1     #Hbilita Bucle Columna
			matrizOnOff(0,0)
			while testF:
				var=raw_input("Ingrese Fila: ")
				if is_number(var):
					var=int(var)
					if var<9 and var>0:
						if var==1:fila=fila1
						if var==2:fila=fila2
						if var==3:fila=fila3
						if var==4:fila=fila4
						if var==5:fila=fila5
						if var==6:fila=fila6
						if var==7:fila=fila7
						if var==8:fila=fila8
						var_f=var
						testF=0	
					else: 
						print("La Fila debe ser un número entre 1 y 8")
				else: 
					print("La Fila debe ser un número entre 1 y 8")
			
			while testC:
				var=raw_input("Ingrese Columna: ")
				if is_number(var):
					var=int(var)
					if var<9 and var>0 and is_number(var):
						if var==1:col=col1
						if var==2:col=col2
						if var==3:col=col3
						if var==4:col=col4
						if var==5:col=col5
						if var==6:col=col6
						if var==7:col=col7
						if var==8:col=col8
						var_c=var
						testC=0
					else:
						print("La Columna debe ser un número entre 1 y 8")
				else:
					print("La Columna debe ser un número entre 1 y 8")
		
			#Enciende la Fila Elegida
			GPIO.output(fila,False)
			GPIO.output(col, True)
			print("Se encendio el GPIO.Fila %d y el GPIO.Columna %d.") % (fila, col)
			print("Es el LED de la Fila %d y la Columna %d.") % (var_f, var_c)
			raw_input("Presione un tecla para encender otro LED \n")
	except (KeyboardInterrupt, SystemExit, SystemError):
		GPIO.cleanup()
		sys.exit()
		raise
		
if __name__ == '__main__':
    main()	
	
